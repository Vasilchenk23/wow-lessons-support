const { Telegraf, Markup } = require("telegraf");
require("dotenv").config();
const {
  isManager,
  addManager,
  removeManager,
  listManagers,
} = require("./utils/role");
const {
  assignClient,
  getManagerByClient,
  getClientByManager,
  removeSession,
} = require("./logic/handlers");

const bot = new Telegraf(process.env.BOT_TOKEN);
const ADMIN_ID = parseInt(process.env.ADMIN_ID);

bot.start((ctx) => {
  const id = ctx.from.id;
  if (isManager(id)) {
    ctx.reply("üëî –í–∏ —É–≤—ñ–π—à–ª–∏ —è–∫ –º–µ–Ω–µ–¥–∂–µ—Ä.");
  } else {
    ctx.reply(
      "–ü—Ä–∏–≤—ñ—Ç! –û–±–µ—Ä—ñ—Ç—å, —â–æ –≤–∞—Å —Ü—ñ–∫–∞–≤–∏—Ç—å:",
      Markup.keyboard([
        ["–ú–∞—é –ø—Ä–æ–±–ª–µ–º—É –∑ –∫—É–ø–ª–µ–Ω–∏–º–∏ —É—Ä–æ–∫–∞–º–∏"],
        ["–•–æ—á—É –∫—É–ø–∏—Ç–∏ WoW-—É—Ä–æ–∫–∏"],
      ]).resize()
    );
  }
});

bot.hears(
  ["–ú–∞—é –ø—Ä–æ–±–ª–µ–º—É –∑ –∫—É–ø–ª–µ–Ω–∏–º–∏ —É—Ä–æ–∫–∞–º–∏", "–•–æ—á—É –∫—É–ø–∏—Ç–∏ WoW-—É—Ä–æ–∫–∏"],
  async (ctx) => {
    const clientId = ctx.from.id;

    if (getManagerByClient(clientId)) {
      return ctx.reply("üïê –í–∞—à –∑–∞–ø–∏—Ç –≤–∂–µ –æ–±—Ä–æ–±–ª—è—î—Ç—å—Å—è. –û—á—ñ–∫—É–π—Ç–µ, –±—É–¥—å –ª–∞—Å–∫–∞.");
    }

    const clientUsername = ctx.from.username || ctx.from.first_name;
    const message = ctx.message.text;

    ctx.reply("–í—ñ—Ç–∞—î–º–æ! –ó–∞—Ä–∞–∑ –ø—ñ–¥–∫–ª—é—á–∏–º–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞...");

    for (const manager of listManagers()) {
      await bot.telegram.sendMessage(
        manager.id,
        `‚ùó–ù–æ–≤–∏–π –∑–∞–ø–∏—Ç –≤—ñ–¥ @${clientUsername}\n–¢–∏–ø: ${message}`,
        Markup.inlineKeyboard([
          Markup.button.callback(
            `üîó –í–∑—è—Ç–∏ –∫–ª—ñ—î–Ω—Ç–∞ ${clientId}`,
            `take_${clientId}`
          ),
          Markup.button.callback("‚ùå –í—ñ–¥—Ö–∏–ª–∏—Ç–∏", `decline_${clientId}`),
        ])
      );
    }
  }
);

bot.action(/^take_(\d+)$/, async (ctx) => {
  const managerId = ctx.from.id;
  const clientId = ctx.match[1];

  if (!isManager(managerId)) return;

  if (parseInt(clientId) === managerId) {
    return ctx.reply("‚õî –í–∏ –Ω–µ –º–æ–∂–µ—Ç–µ –æ–±—Å–ª—É–≥–æ–≤—É–≤–∞—Ç–∏ —Å–∞–º—ñ —Å–µ–±–µ.");
  }

  const current = getManagerByClient(clientId);
  if (current) {
    if (current == managerId) {
      return ctx.reply("‚úÖ –í–∏ –≤–∂–µ –æ–±—Å–ª—É–≥–æ–≤—É—î—Ç–µ —Ü—å–æ–≥–æ –∫–ª—ñ—î–Ω—Ç–∞.");
    } else {
      return ctx.reply("‚õî –¶–µ–π –∫–ª—ñ—î–Ω—Ç –≤–∂–µ –æ–±—Å–ª—É–≥–æ–≤—É—î—Ç—å—Å—è —ñ–Ω—à–∏–º –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º.");
    }
  }

  assignClient(clientId, managerId);

  await ctx.reply(`‚úÖ –í–∏ –≤–∑—è–ª–∏ –∫–ª—ñ—î–Ω—Ç–∞ ${clientId}`);
  await ctx.reply(
    "üîö –ö–æ–ª–∏ –∑–∞–≤–µ—Ä—à–∏—Ç–µ —Å–ø—ñ–ª–∫—É–≤–∞–Ω–Ω—è, –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É –Ω–∏–∂—á–µ:",
    Markup.inlineKeyboard([
      Markup.button.callback("–ó–∞–≤–µ—Ä—à–∏—Ç–∏ –¥—ñ–∞–ª–æ–≥", `end_${clientId}`),
    ])
  );

  await bot.telegram.sendMessage(
    clientId,
    "üë§ –ú–µ–Ω–µ–¥–∂–µ—Ä –ø—Ä–∏—î–¥–Ω–∞–≤—Å—è –¥–æ —á–∞—Ç—É. –í–∏ –º–æ–∂–µ—Ç–µ –ø–∏—Å–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è."
  );
});

bot.action(/^end_(\d+)$/, async (ctx) => {
  const managerId = ctx.from.id;
  const clientId = ctx.match[1];

  const assignedManager = getManagerByClient(clientId);
  if (!assignedManager || assignedManager != managerId) {
    return ctx.reply("‚õî –í–∏ –Ω–µ –≤–µ–¥–µ—Ç–µ —Ü—å–æ–≥–æ –∫–ª—ñ—î–Ω—Ç–∞.");
  }

  removeSession(clientId);
  await bot.telegram.sendMessage(
    clientId,
    "‚úÖ –î—è–∫—É—î–º–æ –∑–∞ –∑–≤–µ—Ä–Ω–µ–Ω–Ω—è! –Ø–∫—â–æ –≤–∏–Ω–∏–∫–Ω—É—Ç—å —â–µ –ø–∏—Ç–∞–Ω–Ω—è ‚Äî –∑–≤–µ—Ä—Ç–∞–π—Ç–µ—Å—å üß°"
  );
  ctx.reply("üü¢ –î—ñ–∞–ª–æ–≥ –∑–∞–≤–µ—Ä—à–µ–Ω–æ.");
});

bot.command("add_manager", (ctx) => {
  if (ctx.from.id !== ADMIN_ID) return ctx.reply("‚õî –ù–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É.");
  const args = ctx.message.text.split(" ");
  const id = parseInt(args[1]);
  const name = args.slice(2).join(" ") || "–ë–µ–∑ —ñ–º–µ–Ω—ñ";
  if (!id) return ctx.reply("‚ùó –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è: /add_manager <id> <—ñ–º‚Äô—è>");
  addManager(id, name);
  ctx.reply(`‚úÖ –ú–µ–Ω–µ–¥–∂–µ—Ä ${name} (${id}) –¥–æ–¥–∞–Ω–∏–π.`);
});

bot.command("remove_manager", (ctx) => {
  if (ctx.from.id !== ADMIN_ID) return ctx.reply("‚õî –ù–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É.");
  const args = ctx.message.text.split(" ");
  const id = parseInt(args[1]);
  if (!id) return ctx.reply("‚ùó –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è: /remove_manager <id>");
  removeManager(id);
  ctx.reply(`üóë –ú–µ–Ω–µ–¥–∂–µ—Ä –∑ ID ${id} –≤–∏–¥–∞–ª–µ–Ω–∏–π.`);
});

bot.command("list_managers", (ctx) => {
  if (ctx.from.id !== ADMIN_ID) return ctx.reply("‚õî –ù–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É.");
  const list = listManagers();
  if (list.length === 0) return ctx.reply("üì≠ –ú–µ–Ω–µ–¥–∂–µ—Ä–∏ –Ω–µ –¥–æ–¥–∞–Ω—ñ.");
  ctx.reply(
    "üìã –°–ø–∏—Å–æ–∫ –º–µ–Ω–µ–¥–∂–µ—Ä—ñ–≤:\n" +
      list.map((m) => `üë§ ${m.name} (ID: ${m.id})`).join("\n")
  );
});

bot.on("message", async (ctx) => {
  const userId = ctx.from.id;
  const msg = ctx.message;

  if (isManager(userId)) {
    const clientId = getClientByManager(userId);
    if (clientId) {
      await bot.telegram.copyMessage(clientId, userId, msg.message_id);
    }
  } else {
    const managerId = getManagerByClient(userId);
    if (managerId) {
      await bot.telegram.copyMessage(managerId, userId, msg.message_id);
    } else {
      ctx.reply("üü° –í–∞—à –∑–∞–ø–∏—Ç —â–µ –Ω–µ –æ–±—Ä–æ–±–ª—è—î—Ç—å—Å—è. –û–±–µ—Ä—ñ—Ç—å –æ–ø—Ü—ñ—é –∑ –º–µ–Ω—é.");
    }
  }
});

bot.launch();
console.log("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–æ");
