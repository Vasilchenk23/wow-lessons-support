const { Telegraf, Markup } = require("telegraf");
require("dotenv").config();

const bot = new Telegraf(process.env.BOT_TOKEN);
const ADMIN_ID = Number(process.env.ADMIN_ID?.trim());
console.log("ADMIN_ID =", ADMIN_ID);

const managers = [];
const userData = {};
const inviteMessages = {};
const clientAssignments = {};

function isValidPhone(phone) {
  const cleaned = phone.replace(/[\s\-()]/g, "");
  return /^(\+?380\d{9}|0\d{9})$/.test(cleaned);
}

function isValidEmail(email) {
  return /^[^\s@]+@[^\s@]+\.[a-zA-Z]{2,}$/.test(email);
}

function isManager(id) {
  return managers.some((m) => m.id === id);
}

function addManager(id, name) {
  if (!isManager(id)) {
    managers.push({ id, name });
    return true;
  }
  return false;
}

function removeManager(id) {
  const index = managers.findIndex((m) => m.id === id);
  if (index !== -1) {
    managers.splice(index, 1);
    return true;
  }
  return false;
}

function listManagers() {
  return managers;
}

function assignClient(clientId, managerId) {
  clientAssignments[clientId] = managerId;
}

function getManagerByClient(clientId) {
  return clientAssignments[clientId] || null;
}

function getClientByManager(managerId) {
  return Object.keys(clientAssignments).find(
    (key) => clientAssignments[key] === managerId
  );
}

function removeSession(clientId) {
  delete clientAssignments[clientId];
}

bot.command("add_manager", (ctx) => {
  if (ctx.from.id !== ADMIN_ID) return ctx.reply("‚õî –ù–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É.");
  const args = ctx.message.text.split(" ");
  const id = Number(args[1]);
  const name = args.slice(2).join(" ") || "–ë–µ–∑ —ñ–º–µ–Ω—ñ";

  if (!id) return ctx.reply("‚ùó –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è: /add_manager <id> <—ñ–º‚Äô—è>");
  if (addManager(id, name)) ctx.reply(`‚úÖ –ú–µ–Ω–µ–¥–∂–µ—Ä ${name} (${id}) –¥–æ–¥–∞–Ω–∏–π.`);
  else ctx.reply(`‚ö†Ô∏è –ú–µ–Ω–µ–¥–∂–µ—Ä –∑ ID ${id} –≤–∂–µ —ñ—Å–Ω—É—î.`);
});

bot.command("remove_manager", (ctx) => {
  if (ctx.from.id !== ADMIN_ID) return ctx.reply("‚õî –ù–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É.");
  const args = ctx.message.text.split(" ");
  const id = Number(args[1]);

  if (!id) return ctx.reply("‚ùó –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è: /remove_manager <id>");
  if (removeManager(id)) ctx.reply(`üóë –ú–µ–Ω–µ–¥–∂–µ—Ä –∑ ID ${id} –≤–∏–¥–∞–ª–µ–Ω–∏–π.`);
  else ctx.reply(`‚ö†Ô∏è –ú–µ–Ω–µ–¥–∂–µ—Ä–∞ –∑ ID ${id} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.`);
});

bot.command("list_managers", (ctx) => {
  if (ctx.from.id !== ADMIN_ID) return ctx.reply("‚õî –ù–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É.");
  const list = listManagers();
  if (!list.length) return ctx.reply("üì≠ –ú–µ–Ω–µ–¥–∂–µ—Ä–∏ –Ω–µ –¥–æ–¥–∞–Ω—ñ.");
  ctx.reply(
    "üìã –°–ø–∏—Å–æ–∫ –º–µ–Ω–µ–¥–∂–µ—Ä—ñ–≤:\n" +
      list.map((m) => `üë§ ${m.name} (ID: ${m.id})`).join("\n")
  );
});

bot.start((ctx) => {
  const id = ctx.from.id;
  if (isManager(id)) ctx.reply("üëî –í–∏ —É–≤—ñ–π—à–ª–∏ —è–∫ –º–µ–Ω–µ–¥–∂–µ—Ä.");
  else
    ctx.reply(
      "–ü—Ä–∏–≤—ñ—Ç! üëã –û–±–µ—Ä—ñ—Ç—å, —â–æ –≤–∞—Å —Ü—ñ–∫–∞–≤–∏—Ç—å:",
      Markup.keyboard([
        ["–ú–∞—é –ø—Ä–æ–±–ª–µ–º—É –∑ –∫—É–ø–ª–µ–Ω–∏–º–∏ —É—Ä–æ–∫–∞–º–∏"],
        ["–•–æ—á—É –∫—É–ø–∏—Ç–∏ WoW-—É—Ä–æ–∫–∏"],
      ]).resize()
    );
});

bot.hears(
  ["–ú–∞—é –ø—Ä–æ–±–ª–µ–º—É –∑ –∫—É–ø–ª–µ–Ω–∏–º–∏ —É—Ä–æ–∫–∞–º–∏", "–•–æ—á—É –∫—É–ø–∏—Ç–∏ WoW-—É—Ä–æ–∫–∏"],
  (ctx) => {
    const clientId = ctx.from.id;
    if (getManagerByClient(clientId))
      return ctx.reply("üïê –í–∞—à –∑–∞–ø–∏—Ç –≤–∂–µ –æ–±—Ä–æ–±–ª—è—î—Ç—å—Å—è. –û—á—ñ–∫—É–π—Ç–µ.");

    userData[clientId] = {
      step: "name",
      type: ctx.message.text,
      username: ctx.from.username || ctx.from.first_name || "–ë–µ–∑_—ñ–º–µ–Ω—ñ",
    };

    ctx.reply("‚úçÔ∏è –í–≤–µ–¥—ñ—Ç—å, –±—É–¥—å –ª–∞—Å–∫–∞, –≤–∞—à–µ —ñ–º‚Äô—è:");
  }
);

bot.on("text", async (ctx) => {
  const clientId = ctx.from.id;
  const msg = ctx.message.text.trim();
  const current = userData[clientId];

  if (current && current.step) {
    if (current.step === "name") {
      if (msg.length < 2 || msg.length > 50)
        return ctx.reply("‚ö†Ô∏è –Ü–º‚Äô—è –∑–∞–Ω–∞–¥—Ç–æ –∫–æ—Ä–æ—Ç–∫–µ –∞–±–æ –¥–æ–≤–≥–µ. –í–≤–µ–¥—ñ—Ç—å —â–µ —Ä–∞–∑:");
      current.name = msg;
      current.step = "phone";
      return ctx.reply(
        "üìû –í–≤–µ–¥—ñ—Ç—å –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥ +380931234567):"
      );
    }

    if (current.step === "phone") {
      if (!isValidPhone(msg))
        return ctx.reply(
          "‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞. –ü—Ä–∏–∫–ª–∞–¥: +380931234567 –∞–±–æ 0931234567.\n–°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑:"
        );
      current.phone = msg.replace(/\s+/g, "");
      current.step = "email";
      return ctx.reply("üìß –í–≤–µ–¥—ñ—Ç—å –≤–∞—à—É –µ–ª–µ–∫—Ç—Ä–æ–Ω–Ω—É –ø–æ—à—Ç—É:");
    }

    if (current.step === "email") {
      if (!isValidEmail(msg))
        return ctx.reply(
          "‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç email. –ü—Ä–∏–∫–ª–∞–¥: example@gmail.com\n–í–≤–µ–¥—ñ—Ç—å —â–µ —Ä–∞–∑:"
        );
      current.email = msg.toLowerCase();
      current.step = "done";

      await ctx.reply("‚úÖ –î—è–∫—É—î–º–æ! –ó–∞—Ä–∞–∑ –ø—ñ–¥–∫–ª—é—á–∏–º–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞...");

      const { name, phone, email, type, username } = current;
      inviteMessages[clientId] = [];

      for (const manager of listManagers()) {
        try {
          const sent = await bot.telegram.sendMessage(
            manager.id,
            `üì• –ù–æ–≤–∏–π –∑–∞–ø–∏—Ç –≤—ñ–¥ @${username}\n\nüßë –Ü–º‚Äô—è: ${name}\nüìû –¢–µ–ª–µ—Ñ–æ–Ω: ${phone}\nüìß Email: ${email}\nüí¨ –¢–∏–ø –∑–∞–ø–∏—Ç—É: ${type}`,
            Markup.inlineKeyboard([
              Markup.button.callback(
                `üîó –í–∑—è—Ç–∏ –∫–ª—ñ—î–Ω—Ç–∞ ${clientId}`,
                `take_${clientId}`
              ),
              Markup.button.callback("‚ùå –í—ñ–¥—Ö–∏–ª–∏—Ç–∏", `decline_${clientId}`),
            ])
          );

          inviteMessages[clientId].push({
            managerId: manager.id,
            messageId: sent.message_id,
          });
        } catch (err) {
          console.error(`–ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –º–µ–Ω–µ–¥–∂–µ—Ä—É ${manager.id}:`, err);
        }
      }

      return;
    }
  }

  try {
    const userId = ctx.from.id;

    if (isManager(userId)) {
      const clientId = getClientByManager(userId);
      if (clientId)
        return bot.telegram.copyMessage(
          clientId,
          userId,
          ctx.message.message_id
        );
    } else {
      const managerId = getManagerByClient(userId);
      if (managerId)
        return bot.telegram.copyMessage(
          managerId,
          userId,
          ctx.message.message_id
        );
      else ctx.reply("üü° –í–∞—à –∑–∞–ø–∏—Ç —â–µ –Ω–µ –æ–±—Ä–æ–±–ª—è—î—Ç—å—Å—è. –û–±–µ—Ä—ñ—Ç—å –æ–ø—Ü—ñ—é –∑ –º–µ–Ω—é.");
    }
  } catch (err) {
    console.error("üí• –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–¥–∞—á—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è:", err);
  }
});

bot.action(/^take_(\d+)$/, async (ctx) => {
  const managerId = ctx.from.id;
  const clientId = ctx.match[1];

  if (!isManager(managerId)) return ctx.reply("‚õî –í–∏ –Ω–µ –º–∞—î—Ç–µ –ø—Ä–∞–≤.");
  if (parseInt(clientId) === managerId)
    return ctx.reply("‚õî –í–∏ –Ω–µ –º–æ–∂–µ—Ç–µ –æ–±—Å–ª—É–≥–æ–≤—É–≤–∞—Ç–∏ —Å–∞–º—ñ —Å–µ–±–µ.");

  const current = getManagerByClient(clientId);
  if (current)
    return ctx.reply(
      current === managerId
        ? "‚úÖ –í–∏ –≤–∂–µ –æ–±—Å–ª—É–≥–æ–≤—É—î—Ç–µ —Ü—å–æ–≥–æ –∫–ª—ñ—î–Ω—Ç–∞."
        : "‚õî –ö–ª—ñ—î–Ω—Ç–∞ –≤–∂–µ –æ–±—Å–ª—É–≥–æ–≤—É—î —ñ–Ω—à–∏–π –º–µ–Ω–µ–¥–∂–µ—Ä."
    );

  assignClient(clientId, managerId);
  await ctx.reply(`‚úÖ –í–∏ –≤–∑—è–ª–∏ –∫–ª—ñ—î–Ω—Ç–∞ ${clientId}`);
  await ctx.reply(
    "üîö –ö–æ–ª–∏ –∑–∞–≤–µ—Ä—à–∏—Ç–µ —Å–ø—ñ–ª–∫—É–≤–∞–Ω–Ω—è, –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É –Ω–∏–∂—á–µ:",
    Markup.inlineKeyboard([
      Markup.button.callback("–ó–∞–≤–µ—Ä—à–∏—Ç–∏ –¥—ñ–∞–ª–æ–≥", `end_${clientId}`),
    ])
  );

  await bot.telegram.sendMessage(
    clientId,
    "üë§ –ú–µ–Ω–µ–¥–∂–µ—Ä –ø—Ä–∏—î–¥–Ω–∞–≤—Å—è –¥–æ —á–∞—Ç—É. –í–∏ –º–æ–∂–µ—Ç–µ –ø–∏—Å–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è."
  );

  for (const entry of inviteMessages[clientId] || []) {
    if (entry.managerId !== managerId) {
      await bot.telegram.editMessageReplyMarkup(
        entry.managerId,
        entry.messageId,
        null,
        {
          inline_keyboard: [
            [
              {
                text: "‚õî –ö–ª—ñ—î–Ω—Ç –≤–∂–µ –æ–±—Å–ª—É–≥–æ–≤—É—î—Ç—å—Å—è",
                callback_data: "disabled",
              },
            ],
          ],
        }
      );
    }
  }

  delete inviteMessages[clientId];
  delete userData[clientId];
});

bot.action(/^end_(\d+)$/, async (ctx) => {
  const managerId = ctx.from.id;
  const clientId = ctx.match[1];
  if (getManagerByClient(clientId) !== managerId)
    return ctx.reply("‚õî –í–∏ –Ω–µ –≤–µ–¥–µ—Ç–µ —Ü—å–æ–≥–æ –∫–ª—ñ—î–Ω—Ç–∞.");

  removeSession(clientId);
  await bot.telegram.sendMessage(
    clientId,
    "‚úÖ –î—è–∫—É—î–º–æ –∑–∞ –∑–≤–µ—Ä–Ω–µ–Ω–Ω—è! –Ø–∫—â–æ –≤–∏–Ω–∏–∫–Ω—É—Ç—å —â–µ –ø–∏—Ç–∞–Ω–Ω—è ‚Äî –∑–≤–µ—Ä—Ç–∞–π—Ç–µ—Å—å üß°"
  );
  ctx.reply("üü¢ –î—ñ–∞–ª–æ–≥ –∑–∞–≤–µ—Ä—à–µ–Ω–æ.");
});

bot.action("disabled", (ctx) =>
  ctx.answerCbQuery("‚õî –¶–µ–π –∫–ª—ñ—î–Ω—Ç –≤–∂–µ –æ–±—Å–ª—É–≥–æ–≤—É—î—Ç—å—Å—è")
);

bot
  .launch()
  .then(() => console.log("ü§ñ –ë–æ—Ç —É—Å–ø—ñ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω–∏–π"))
  .catch((err) => console.error("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫—É:", err));

process.once("SIGINT", () => bot.stop("SIGINT"));
process.once("SIGTERM", () => bot.stop("SIGTERM"));
